from .conf import settings,alipayDatafrom json import dumpsfrom urllib.parse import urlencodeimport timefrom .util import rsa2_sign,params_filter,signCheckdef place_order(orderId,money,orderTitle,body=None,return_url=None,notify_url=None,passback_params=None):    '''    订单提交    :param orderId: 订单号    :param money: 订单金额    :param orderTitle: 订单标题    :param body: 订单描述内容    :param return_url: 同步返回url    :param passback_params:公用回传参数    :param notify_url: 异步通知url    :return:支付跳转链接    '''    params = {}    params["app_id"]=settings.app_id    params["method"]=settings.method    params["format"] =settings.format    params["return_url"] =return_url    params["charset"] =settings.charset    params["sign_type"] =settings.sign_type    params["timestamp"] =time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))    params["version"] = settings.version    params["notify_url"] = settings.notify_url    biz_content={}    biz_content["out_trade_no"]=orderId    biz_content["product_code"]="FAST_INSTANT_TRADE_PAY"    biz_content["total_amount"]=money    biz_content["subject"]=orderTitle    params["biz_content"]=dumps(biz_content, separators=(',', ':'))    params_to_str=params_filter(params)    sign=rsa2_sign(params_to_str,settings.prikey).decode()    params["sign"]=sign    return settings.gateway+urlencode(params)def notify_verify(need_valid):    '''    回调消息验签    :param need_valid: 接收到的回调数据(dict)    :return: 验签结果(True/False)    '''    sign=need_valid.pop("sign")    sign_type=need_valid.pop("sign_type")    if sign_type!=settings.sign_type:        raise Exception("The type of encryption is incorrect!")    valid_str=params_filter(need_valid)    return signCheck(valid_str,sign,alipayData.public_key)