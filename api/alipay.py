import settingfrom json import dumpsfrom urllib.parse import urlencodeimport timefrom api.utils import params_filterfrom api.sign import rsa2_sign, signCheckdef place_order(orderId, money, orderTitle, body=None, return_url=None, notify_url=None, passback_params=None):	'''	订单提交	:param orderId: 订单号	:param money: 订单金额	:param orderTitle: 订单标题	:param body: 订单描述内容	:param return_url: 同步返回url	:param passback_params:公用回传参数	:param notify_url: 异步通知url	:return:支付跳转链接	'''	params = {}	params["app_id"] = setting.app_id	params["method"] = setting.method	params["format"] = setting.format	params["return_url"] = return_url	params["charset"] = setting.charset	params["sign_type"] = setting.sign_type	params["timestamp"] = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(time.time()))	params["version"] = setting.version	params["notify_url"] = setting.notify_url	biz_content = {}	biz_content["out_trade_no"] = orderId	biz_content["product_code"] = "FAST_INSTANT_TRADE_PAY"	biz_content["total_amount"] = money	biz_content["subject"] = orderTitle	params["biz_content"] = dumps(biz_content, separators=(',', ':'))	params_to_str = params_filter(params)	sign = rsa2_sign(params_to_str, setting.app_private_key).decode()	params["sign"] = sign	return setting.gateway + urlencode(params)def notify_verify(need_valid):	'''	回调消息验签	:param need_valid: 接收到的回调数据(dict)	:return: 验签结果(True/False)	'''	sign = need_valid.pop("sign")	sign_type = need_valid.pop("sign_type")	if sign_type != setting.sign_type:		raise Exception("The type of encryption is incorrect!")	valid_str = params_filter(need_valid)	return signCheck(valid_str, sign, setting.alipay_public_key)